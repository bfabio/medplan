import { Controller } from "stimulus"
import Rails from "@rails/ujs"
import Timeout from 'smart-timeout'

export default class extends Controller
  @targets = [ 'container', 'menu', 'navbar']

  connect: =>
    # Per disattivare l'evento click dei bottoni dopo il passaggio a Bulma
    # che non ha la gestione eventi via Javascript
    document.querySelectorAll("[disabled]").forEach (obj) ->
      obj.classList.add('is-disabled')

  goPage: (event) =>
    [data, status, xhr] = event.detail
    this.containerTarget.innerHTML = xhr.response

  getPage: (url) =>
    Rails.ajax
      type: "GET"
      url: url
      success: (data, status, xhr) =>
        this.containerTarget.innerHTML = xhr.response

  getElement: (target, url) =>
    Rails.ajax
      type: "GET"
      url: url
      success: (data, status, xhr) =>
        target.outerHTML = xhr.response

  goElement: (event) =>
    [data, status, xhr] = event.detail
    event.currentTarget.outerHTML = xhr.response

  toggleMenu: (event) =>
    document.getElementById(event.target.dataset.id).classList.toggle('is-active')

  toggleVisible: (event) =>
    document.getElementById(event.target.dataset.id).classList.toggle('is-hidden')

  toggleVisibleSelf: (event) =>
    event.target.classList.toggle('is-hidden')

  menu: (event) =>
    if this.hasMenuTarget
      menu = this.menuTarget
      menu.classList.toggle('is-active')
      if this.hasCloseTarget
        for t in this.closeTargets
          icon = t.querySelector('i')
          if icon
            icon.classList.toggle('fa-bars')
            icon.classList.toggle('fa-times')

  send: (message, level = "success", timeout = 1500) ->
    new Noty(
      type: "#{ level }"
      text: message
      progressBar: true
      timeout: timeout
      theme: 'bulma'
      layout: 'topCenter'
    ).show()

  confirmation: (event) ->
    target = event.target
    confirmation = target.dataset.pageConfirmation
    url = target.dataset.pageUrl
    n = new Noty(
      text: "#{confirmation}"
      type: 'alert'
      modal: true
      theme: 'relax'
      layout: 'center'
      closeWith: 'button'
      animation:
        open: null
        close: null
      callbacks:
        onTemplate: () ->
          #console.log this.barDom.childNodes[]
          buttonsContainer = this.barDom.querySelector('.noty_buttons')
          buttonsContainer.classList.add('columns') if buttonsContainer
      buttons: [
        Noty.button("<%= I18n.t( 'yes', default: 'Yes' ) %>", 'button is-success is-focused column is-6', ( =>
          window.location.href = url
          return
        ), id: 'button1', 'data-status': 'ok')
        Noty.button("<%= I18n.t( 'no', default: 'No' ) %>", 'button is-danger column is-6', ->
          n.close()
          return
        )
      ])
    n.show()

  deleyedInput: (event) =>
    callback = () =>
      this.sendForm(event)
    if Timeout.exists('textDelay')
      Timeout.clear('textDelay', true)
    Timeout.set( 'textDelay', callback, 750 )

  setActive: (event) =>
    target = event.currentTarget
    if target.dataset.target == 'page.navbar'
      this.navbarTargets.forEach (obj) =>
        obj.classList.remove('is-active')
      target.classList.add('is-active')
    else if target.dataset.target == 'section.letter'
      this.letterTargets.forEach (obj) =>
        obj.closest('li').classList.remove('is-active')
      target.closest('li').classList.add('is-active')