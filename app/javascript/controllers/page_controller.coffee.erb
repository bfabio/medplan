import { Controller } from "stimulus"
import Rails from "@rails/ujs"
import Timeout from 'smart-timeout'
import Swal from 'sweetalert2'

export default class extends Controller
  @targets = [ 'container', 'menu', 'navbar']

  connect: =>
    # Per disattivare l'evento click dei bottoni dopo il passaggio a Bulma
    # che non ha la gestione eventi via Javascript
    document.querySelectorAll("[disabled]").forEach (obj) ->
      obj.classList.add('is-disabled')

  goPage: (event) =>
    [data, status, xhr] = event.detail
    this.containerTarget.innerHTML = xhr.response

  getPage: (url) =>
    Rails.ajax
      type: "GET"
      url: url
      success: (data, status, xhr) =>
        this.containerTarget.innerHTML = xhr.response

  getElement: (target, url) =>
    Rails.ajax
      type: "GET"
      url: url
      success: (data, status, xhr) =>
        target.outerHTML = xhr.response if target

  goElement: (event) =>
    [data, status, xhr] = event.detail
    event.currentTarget.outerHTML = xhr.response

  toggleMenu: (event) =>
    document.getElementById(event.target.dataset.id).classList.toggle('is-active')

  toggleVisible: (event) =>
    document.getElementById(event.target.dataset.id).classList.toggle('is-hidden')

  toggleVisibleSelf: (event) =>
    event.target.classList.toggle('is-hidden')

  menu: (event) =>
    if this.hasMenuTarget
      menu = this.menuTarget
      menu.classList.toggle('is-active')
      if this.hasCloseTarget
        for t in this.closeTargets
          icon = t.querySelector('i')
          if icon
            icon.classList.toggle('fa-bars')
            icon.classList.toggle('fa-times')

  send: (message, level = 'success', timeout = 2000, toast = true) ->
    options = {
      toast: if level == 'error' then false else toast
      icon: level
      timerProgressBar: true
      position: if level == 'error' then 'center' else 'top-end'
      text: message
      timer: if level == 'error' then false else timeout
      showConfirmButton: if level == 'error' then true else false
      didOpen: (toast) =>
        toast.addEventListener('mouseenter', Swal.stopTimer)
        toast.addEventListener('mouseleave', Swal.resumeTimer)
      showClass:
        popup: if level == 'error' then '' else 'animate__animated animate__bounceInRight'
      hideClass:
        popup: if level == 'error' then '' else 'animate__animated animate__bounceOutRight'
    }
    Swal.fire(options)

  confirmation: (event) ->
    target = event.target
    confirmation = target.dataset.pageConfirmation || ''
    url = target.dataset.pageUrl
    icon = target.dataset.icon || 'question'
    title = target.dataset.title || ''
    deletable = target.dataset.deletable || false
    form = target.closest('form')
    options = {
      icon: icon
      timerProgressBar: false
      position: 'center'
      title: title
      html: confirmation
      showConfirmButton: true
      showCancelButton: true
      confirmButtonText: "<%= I18n.t( 'yes', default: 'Yes' ) %>"
      cancelButtonText: "<%= I18n.t( 'no', default: 'No' ) %>"
      showClass:
        popup: 'swal2-noanimation'
      hideClass:
        popup: ''
    }
    Swal.fire(options).then (result) =>
      if result.isConfirmed
        window.location.href = url

  deleyedInput: (event) =>
    callback = () =>
      this.sendForm(event)
    if Timeout.exists('textDelay')
      Timeout.clear('textDelay', true)
    Timeout.set( 'textDelay', callback, 750 )

  setActive: (event) =>
    target = event.currentTarget
    if target.dataset.target == 'page.navbar'
      this.navbarTargets.forEach (obj) =>
        obj.classList.remove('is-active')
      target.classList.add('is-active')
    else if target.dataset.target == 'section.letter'
      this.letterTargets.forEach (obj) =>
        obj.closest('li').classList.remove('is-active')
      target.closest('li').classList.add('is-active')